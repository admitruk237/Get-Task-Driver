import axios from 'axios';

export interface SignInResponseType {
  accessToken: string;
  refreshToken: string;
}

// üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Ö–æ–¥—É (login)
export const signInApi = async (email: string, password: string) => {
  const response = await axios.post<SignInResponseType>(
    'https://todo-backend-777.up.railway.app/auth/login',
    {
      email,
      password,
    }
  );

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ —É localStorage
  localStorage.setItem('accessToken', response.data.accessToken);
  localStorage.setItem('refreshToken', response.data.refreshToken);

  return response.data;
};

// üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ö–æ–¥—É (logout)
export const logoutApi = () => {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
};

// üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
export const refreshAccessToken = async () => {
  const refreshToken = localStorage.getItem('refreshToken');
  if (!refreshToken) throw new Error('–ù–µ–º–∞—î refreshToken');

  const response = await axios.post<SignInResponseType>('/auth/refresh', {
    refreshToken,
  });

  localStorage.setItem('accessToken', response.data.accessToken);
  return response.data.accessToken;
};
